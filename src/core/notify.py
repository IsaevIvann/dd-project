import logging
import requests
from typing import Tuple, Callable, Optional
from django.conf import settings
from django.utils.timezone import localtime, now
from django.core.cache import cache
from django.db import IntegrityError, transaction

from .models import NotifyLock  # <‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –ë–î-–∑–∞–º–æ–∫

log = logging.getLogger(__name__)

# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ----------

def _val(x):
    return x if x else ""

def _join(*parts):
    return "\n".join(p for p in parts if p)

def _fmt_dt(dt):
    if not dt:
        return ""
    return localtime(dt).strftime("%d.%m.%Y %H:%M")

def format_dt(dt) -> str:
    return _fmt_dt(dt)

def status_ru(value: str) -> str:
    mapping = {
        "draft": "–ß–µ—Ä–Ω–æ–≤–∏–∫",
        "confirmed": "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
        "picked_up": "–ó–∞–±—Ä–∞–ª–∏ –±–∞–≥–∞–∂",
        "in_storage": "–ù–∞ —Å–∫–ª–∞–¥–µ",
        "out_for_delivery": "–í –ø—É—Ç–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
        "delivered": "–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        "canceled": "–û—Ç–º–µ–Ω—ë–Ω",
    }
    return mapping.get(value, value)

def _status_title(order, status_value: str) -> str:
    S = order.__class__.Status
    titles = {
        S.DRAFT: "üìù –ß–µ—Ä–Ω–æ–≤–∏–∫",
        S.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
        S.PICKED_UP: "üì¶ –ó–∞–±—Ä–∞–ª–∏ –±–∞–≥–∞–∂",
        S.IN_STORAGE: "üè¨ –ë–∞–≥–∞–∂ –Ω–∞ —Å–∫–ª–∞–¥–µ",
        S.OUT_FOR_DELIVERY: "üöö –í –ø—É—Ç–∏ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É",
        S.DELIVERED: "üéâ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ",
        S.CANCELED: "‚ùå –û—Ç–º–µ–Ω—ë–Ω",
    }
    return titles.get(status_value, f"–°—Ç–∞—Ç—É—Å: {status_value}")

def _pickup_block(order):
    if not _val(getattr(order, "pickup_address", "")):
        return ""
    return _join(
        f"–ê–¥—Ä–µ—Å –∑–∞–±–æ—Ä–∞: {_val(order.pickup_address)}",
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –∑–∞–±–æ—Ä–∞: {_fmt_dt(getattr(order, 'pickup_time', None))}",
    )

def _delivery_block(order):
    if not _val(getattr(order, "delivery_address", "")):
        return ""
    return _join(
        f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {_val(order.delivery_address)}",
        f"–î–∞—Ç–∞/–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {_fmt_dt(getattr(order, 'delivery_time', None))}",
    )

# ---------- –ñ—ë—Å—Ç–∫–∞—è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å ----------

def _db_try_lock(key: str) -> bool:
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å-–∑–∞–º–æ–∫ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–ª—é—á–æ–º.
    True ‚Äî –∑–∞–º–æ–∫ —Å–æ–∑–¥–∞–Ω (–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å).
    False ‚Äî –∑–∞–º–æ–∫ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–¥—É–±–ª—å).
    """
    try:
        with transaction.atomic():
            NotifyLock.objects.create(key=key)
            return True
    except IntegrityError:
        return False
    except Exception as e:
        # –µ—Å–ª–∏ —Å –ë–î —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ ‚Äî –Ω–µ –≤–∞–ª–∏–º –ø—Ä–æ—Ü–µ—Å—Å, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        log.warning("NotifyLock DB error for key=%s: %s", key, e)
        return True  # –ª—É—á—à–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–¥–∏–Ω –ª–∏—à–Ω–∏–π, —á–µ–º –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é

def send_once(key: str, do_send: Callable[[], None], ttl_seconds: int = 120) -> bool:
    """
    –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞:
      1) —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∫—ç—à (–±—ã—Å—Ç—Ä—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞—Å–ª–æ–Ω –æ—Ç –ø–æ–≤—Ç–æ—Ä–∞),
      2) –∑–∞—Ç–µ–º –ë–î-–∑–∞–º–æ–∫ (–≥–∞—Ä–∞–Ω—Ç–∏—è '–æ–¥–∏–Ω —Ä–∞–∑' –º–µ–∂–¥—É –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏/–≤–æ—Ä–∫–µ—Ä–∞–º–∏),
      3) –≤—ã–ø–æ–ª–Ω—è–µ–º do_send().
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏; False ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ –∫–∞–∫ –¥—É–±–ª—å.
    """
    # –∫—ç—à –∫–∞–∫ "–ø–µ—Ä–≤—ã–π –±–∞—Ä—å–µ—Ä"
    try:
        if not cache.add(f"once:{key}", "1", timeout=ttl_seconds):
            log.info("send_once: duplicate key=%s (cache)", key)
            return False
    except Exception as e:
        log.warning("send_once: cache unavailable (%s), fallback to DB only", e)

    # —Ä–µ—à–∞—é—â–µ–µ —Å–ª–æ–≤–æ ‚Äî –ë–î
    if not _db_try_lock(key):
        log.info("send_once: duplicate key=%s (db)", key)
        return False

    try:
        do_send()
        return True
    except Exception as e:
        log.error("send_once: send error for key=%s: %s", key, e)
        return False

# ---------- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram ----------

def tg_send(text: str, chat_id: str) -> Tuple[bool, int, str]:
    token = getattr(settings, "TELEGRAM_BOT_TOKEN", "")
    if not token or not chat_id:
        return (False, 0, "Missing token or chat_id")
    try:
        r = requests.post(
            f"https://api.telegram.org/bot{token}/sendMessage",
            data={
                "chat_id": str(chat_id),
                "text": text,
                "parse_mode": "HTML",
                "disable_web_page_preview": True,
            },
            timeout=10,
        )
        return (r.ok, r.status_code, r.text)
    except Exception as e:
        return (False, 0, f"Exception: {e}")

def _normalize_chat_ids(ids):
    if ids is None:
        return []
    if isinstance(ids, (str, int)):
        ids = [ids]
    out = []
    for x in ids:
        s = str(x).strip()
        if s:
            out.append(s)
    # dedup —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫
    return list(dict.fromkeys(out))

def _get_admin_chat_ids():
    single = getattr(settings, "ADMIN_TG_CHAT_ID", "")
    if single:
        return _normalize_chat_ids(single)
    ids = getattr(settings, "TELEGRAM_CHAT_IDS", [])
    return _normalize_chat_ids(ids)

def tg_send_to_admins(text: str) -> bool:
    ids = _get_admin_chat_ids()
    if not ids:
        log.warning("tg_send_to_admins: no admin chat ids configured (ADMIN_TG_CHAT_ID/TELEGRAM_CHAT_IDS empty)")
        return False
    ok = True
    for cid in ids:
        r = tg_send(text, cid)
        ok = ok and r[0]
        if not r[0]:
            log.error("tg_send_to_admins failed for %s: %s %s", cid, r[1], r[2])
    return ok

def tg_send_to_order(order, text: str) -> Tuple[bool, int, str]:
    chat_id = getattr(order, "telegram_chat_id", None)
    if not chat_id:
        return (False, 0, "Order has no telegram_chat_id")
    return tg_send(text, chat_id)

# ---------- –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è TG ----------

def format_status_message(order, old_status=None):
    new_title = _status_title(order, getattr(order, "status", ""))
    line_id = f"–ó–∞–∫–∞–∑ #{order.pk}"

    status_line = ""
    if old_status is not None and old_status != order.status:
        status_line = f"<b>{_status_title(order, old_status)}</b> ‚Üí <b>{new_title}</b>"

    return _join(
        new_title,
        line_id,
        status_line,
        _pickup_block(order),
        _delivery_block(order),
    )

def send_status_update(order, old_status=None):
    text = format_status_message(order, old_status)
    return tg_send_to_order(order, text)

def send_welcome(order):
    text = _join(
        "üëã –ì–æ—Ç–æ–≤–æ! –ú—ã –±—É–¥–µ–º –ø—Ä–∏—Å—ã–ª–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–µ–º—É –∑–∞–∫–∞–∑—É.",
        f"–ó–∞–∫–∞–∑ #{order.pk}",
        _pickup_block(order),
        _delivery_block(order),
    )
    return tg_send_to_order(order, text)

def build_deeplink_for_order(order_id: int) -> str:
    username = getattr(settings, "TELEGRAM_BOT_USERNAME", "") or getattr(settings, "TELEGRAM_BOT_NAME", "")
    if not username:
        return ""
    return f"https://t.me/{username}?start=order_{order_id}"

def format_admin_new_order(order):
    return _join(
        "üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑",
        f"–ó–∞–∫–∞–∑ #{order.pk}",
        f"–ò–º—è: {_val(getattr(order, 'name', ''))}",
        f"–¢–µ–ª–µ—Ñ–æ–Ω: {_val(getattr(order, 'phone', ''))}",
        _pickup_block(order),
        _delivery_block(order),
    )
